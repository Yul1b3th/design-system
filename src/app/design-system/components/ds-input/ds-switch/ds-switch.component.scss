@use "sass:color";
@use "sass:map";
@use "../../../styles/abstracts/functions" as *;
@use "../../../styles/abstracts/variables" as *;
@use "../../../styles/abstracts/mixins" as *;

.form-group {
  margin-bottom: get-spacing(md);

  .input-wrapper {
    position: relative;
    display: flex;
    align-items: center;

    .input-switch {
      margin-right: get-spacing(sm);
      width: 2rem;
      height: 1rem;
      border: 1px solid;
      @include apply-color(border-color, neutral, gray);
      border-radius: 1rem;
      @include apply-transition(all, 0.3s, ease-in-out);
      appearance: none;
      background-color: get-color(neutral, light);
      position: relative;
      cursor: pointer;

      &:checked {
        background-color: get-color(primary, default);
      }

      &:before {
        content: "";
        position: absolute;
        top: 0.1rem;
        left: 0.1rem;
        width: 0.8rem;
        height: 0.8rem;
        border-radius: 50%;
        background-color: get-color(utility, white);
        @include apply-transition(all, 0.3s, ease-in-out);
      }

      &:checked:before {
        left: 1.1rem;
      }

      // Default state
      @include apply-color(background-color, neutral, light);
      @include apply-color(color, neutral, dark);

      // Hover state
      &:hover {
        @include input-state-hover;
      }

      // Typing state (focus)
      &:focus {
        @include input-state-focus(get-color(primary, default));
      }

      // Disabled state
      &:disabled {
        @include apply-color(background-color, neutral, light);
        @include apply-color(color, neutral, "gray-dark");
        @include apply-color(border-color, neutral, gray);
        cursor: not-allowed;
      }

      // Verification state
      &.verification {
        @include apply-color(border-color, status, info);
        @include apply-color(color, status, info);

        &:focus {
          box-shadow: 0 0 0 3px
            color.scale(get-color(status, info), $alpha: -50%);
        }
      }

      // Error state
      &.error {
        @include apply-color(border-color, status, danger);
        @include apply-color(color, status, danger);

        &:focus {
          box-shadow: 0 0 0 3px
            color.scale(get-color(status, danger), $alpha: -50%);
        }
      }

      &.dark-mode {
        @include apply-color(background-color, neutral, "dark-200");
        @include apply-color(color, utility, white);
        @include apply-color(border-color, neutral, "gray-dark");

        &:focus {
          @include apply-color(border-color, primary, light);
          box-shadow: 0 0 0 3px
            color.scale(get-color(primary, light), $alpha: -50%);
        }
      }

      &.light-mode {
        @include apply-color(background-color, neutral, light);
        @include apply-color(color, neutral, dark);
        @include apply-color(border-color, neutral, gray);

        &:focus {
          @include apply-color(border-color, primary, default);
          box-shadow: 0 0 0 3px
            color.scale(get-color(primary, default), $alpha: -50%);
        }
      }
    }

    label {
      font-size: get-font-size(base);
      @include apply-color(color, neutral, dark);
    }
  }

  .error-message {
    margin-top: get-spacing(xs);
    font-size: get-font-size(sm);
    @include apply-color(color, status, danger);
  }
}
