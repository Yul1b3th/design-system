// abstracts/_functions.scss

@use "sass:map";
@use "sass:color";
@use "sass:meta";
@use "./variables" as *;

// === Funciones genéricas ===

// Obtiene un valor de cualquier mapa con verificación de clave
@function get-map-value($map, $key) {
  @if map.has-key($map, $key) {
    @return map.get($map, $key);
  } @else {
    @error "La clave `#{$key}` no existe en el mapa proporcionado.";
  }
}

// === Funciones relacionadas con tipografía ===

// Obtiene una fuente por nombre
@function get-font($font-name) {
  @return get-map-value($fonts, $font-name);
}

// Obtiene un tamaño de fuente
@function get-font-size($size-name) {
  @return get-map-value($font-sizes, $size-name);
}

// Obtiene una altura de línea
@function get-line-height($size-name) {
  @return get-map-value($line-heights, $size-name);
}

// === Funciones relacionadas con espaciado ===

// Obtiene un espaciado
@function get-spacing($size-name) {
  @return get-map-value($spacing, $size-name);
}

// === Funciones relacionadas con colores ===

// Obtiene un color por nombre
@function get-color($color-name...) {
  $color-map: $colors;

  @each $name in $color-name {
    @if map.has-key($color-map, $name) {
      $color-map: map.get($color-map, $name);
    } @else {
      @error "La clave `#{$name}` no existe en el mapa de colores.";
    }
  }

  @if meta.type-of($color-map) == "map" {
    @error "El valor `#{$color-name}` no es un color válido.";
  }

  @return $color-map;
}

// Obtiene un color de fondo por nombre
@function get-background-color($background-name...) {
  $color-map: $backgrounds;

  @each $name in $background-name {
    @if map.has-key($color-map, $name) {
      $color-map: map.get($color-map, $name);
    } @else {
      @error "La clave `#{$name}` no existe en el mapa de colores de fondo.";
    }
  }

  @if meta.type-of($color-map) != "color" {
    @error "El valor `#{$background-name}` no es un color válido.";
  }

  @return $color-map;
}

// Oscurecer un color
@function darken-color($color, $amount) {
  @return color.scale($color, $lightness: -$amount);
}

// Convierte un color a HSL
@function color-to-hsl($color) {
  @return hsl(
    color.channel($color, "hue", $space: hsl),
    color.channel($color, "saturation", $space: hsl),
    color.channel($color, "lightness", $space: hsl)
  );
}

// Convierte un color a HSLA con transparencia
@function color-to-hsla($color, $alpha) {
  @return hsla(
    color.channel($color, "hue", $space: hsl),
    color.channel($color, "saturation", $space: hsl),
    color.channel($color, "lightness", $space: hsl),
    $alpha
  );
}

@function is-color($value) {
  @return meta.type-of($value) == "color";
}

// === Funciones relacionadas con diseño responsivo ===

// Obtiene un breakpoint
@function get-breakpoint($size-name) {
  @return get-map-value($breakpoints, $size-name);
}
